#!/usr/bin/env python
from brownie import Contract
from brownie import (
    ERC20LP,
    RewardsOnlyGauge,
    DfxUpgradeableProxy,
    ChildChainStreamer,
    ChildChainReceiver,
    ChildChainFactory,
)

from utils.config import (
    DEPLOY_ACCT,
    DEPLOY_PROXY_ACCT,
    INSTANCE_ID,
    VERIFY_CONTRACTS,
    verify_deploy_address,
    verify_deploy_network,
)
from utils.logger import load_inputs, load_outputs, write_contract
from utils.network import connected_network


existing = load_inputs(INSTANCE_ID)
deployed = load_outputs(INSTANCE_ID)


CHILD_CHAIN_STREAMER_BYTECODE = "6020610c686000396000518060a01c610c63576040526020610c886000396000518060a01c610c63576060526020610ca86000396000518060a01c610c635760805234610c63576040516000556060516002556080516003556001600b55604051600c60805160205260005260406000205562093a80600c608051602052600052604060002060038101905055610bc461009e61000039610bc4610000f36003361161000c57610a2f565b60003560e01c34610bb25763661ab0b2811861011d5760643610610bb2576004358060a01c610bb2576040526024358060a01c610bb2576060526000543318610bb257600c604051602052600052604060002054156100c257601a6080527f52657761726420746f6b656e20616c726561647920616464656400000000000060a0526080506080518060a001601f826000031636823750506308c379a06040526020606052601f19601f6080510116604401605cfd5b600b5460805260405160805160078111610bb2576003015560805160018101818110610bb2579050600b55606051600c604051602052600052604060002055604435600c604051602052600052604060002060038101905055005b635de59dbc811861037a5760243610610bb2576004358060a01c610bb2576040526000543318610bb257600c6040516020526000526040600020546101b95760166060527f52657761726420746f6b656e206e6f742061646465640000000000000000000060805260605060605180608001601f826000031636823750506308c379a06020526020604052601f19601f6060510116604401603cfd5b600c6040516020526000526040600020600081556000600182015560006002820155600060038201556000600482015560006005820155506040516370a082316080523060a052602060806024609c845afa61021a573d600060003e3d6000fd5b60203d10610bb25760809050516060526000600460c0527fa9059cbb0000000000000000000000000000000000000000000000000000000060e05260c0805160208201836101200181518152505080830192505050338161012001526020810190506060518161012001526020810190508061010052610100505060206101a06101005161012060006040515af16102b7573d600060003e3d6000fd5b3d602081183d60201002186101805261018080518060805260208201805160a052505050608051156102f65760a05160805160200360031b1c15610bb2575b600b5460018103818111610bb257905060c05260006008905b8060e05260405160e05160078111610bb25760030154186103665760c05160078111610bb2576003015460e05160078111610bb25760030155600060c05160078111610bb2576003015560c051600b555050610378565b60010181811861030f57505060006000fd5b005b63d1dd6f5681186103ac5760243610610bb2576004358060a01c610bb2576040526000543318610bb257604051600255005b631afe22a6811861040b5760043610610bb257600d546102005260006008905b806003015461022052610220516103e257610403565b61022051604052610200516060526103f8610a35565b6001018181186103cc575b505042600d55005b63a4f6af7081186107975760243610610bb2576004358060a01c610bb25761020052600d546102205260006102405260006008905b8060030154610260526102605161045657610721565b610260516040526102205160605261046c610a35565b61020051610260511861071657600c610260516020526000526040600020600481019050546102805261028051600c61026051602052600052604060002060058101905054808203828111610bb257905090506102a052610260516370a082316102e052306103005260206102e060246102fc845afa6104f1573d600060003e3d6000fd5b60203d10610bb2576102e09050516102c0526102a0516102c0511115610716576102c0516102a051808203828111610bb257905090506102e052600c6102605160205260005260406000206003810190505461030052600c6102605160205260005260406000206001810190505442101561068857600c610200516020526000526040600020543318156105e557601a610320527f52657761726420706572696f64207374696c6c206163746976650000000000006103405261032050610320518061034001601f826000031636823750506308c379a06102e052602061030052601f19601f6103205101166044016102fcfd5b600c6102605160205260005260406000206001810190505442808203828111610bb257905090506103205261032051600c61026051602052600052604060002060028101905054808202811583838304141715610bb25790509050610340526102e05161034051808201828110610bb25790509050610300518015610bb25780820490509050600c610260516020526000526040600020600281019050556106b6565b6102e051610300518015610bb25780820490509050600c610260516020526000526040600020600281019050555b4261030051808201828110610bb25790509050600c61026051602052600052604060002060018101905055610280516102e051808201828110610bb25790509050600c610260516020526000526040600020600481019050556001610240525b600101818118610440575b50506102405161079157601e610260527f496e76616c696420746f6b656e206f72206e6f206e65772072657761726400006102805261026050610260518061028001601f826000031636823750506308c379a061022052602061024052601f19601f61026051011660440161023cfd5b42600d55005b63d88449ee81186108575760443610610bb2576004358060a01c610bb2576040526000543318610bb257600c604051602052600052604060002060018101905054421161083b57601a6060527f52657761726420706572696f64207374696c6c2061637469766500000000000060805260605060605180608001601f826000031636823750506308c379a06020526020604052601f19601f6060510116604401603cfd5b602435600c604051602052600052604060002060038101905055005b63058a3a2481186108a55760443610610bb2576004358060a01c610bb2576040526024358060a01c610bb2576060526000543318610bb257606051600c604051602052600052604060002055005b636b441a4081186108d75760243610610bb2576004358060a01c610bb2576040526000543318610bb257604051600155005b63e5ea47b881186109015760043610610bb2576001546040526040513318610bb257604051600055005b638da5cb5b81186109205760043610610bb25760005460405260206040f35b631ec0cdc1811861093f5760043610610bb25760015460405260206040f35b63b618ba62811861095e5760043610610bb25760025460405260206040f35b6354c49fe981186109895760243610610bb25760043560078111610bb2576003015460405260206040f35b63963c94b981186109a85760043610610bb257600b5460405260206040f35b6348e9c65e8118610a0e5760243610610bb2576004358060a01c610bb257604052600c604051602052600052604060002080546060526001810154608052600281015460a052600381015460c052600481015460e0526005810154610100525060c06060f35b63629d46c28118610a2d5760043610610bb257600d5460405260206040f35b505b60006000fd5b42600c604051602052600052604060002060018101905054808281188284100218905090506080526060516080511115610bb057608051606051808203828111610bb25790509050600c604051602052600052604060002060028101905054808202811583838304141715610bb2579050905060a05260a05115610bb057600c6040516020526000526040600020600581019050805460a051808201828110610bb2579050905081555060006004610100527fa9059cbb000000000000000000000000000000000000000000000000000000006101205261010080516020820183610160018151815250508083019250505060025481610160015260208101905060a0518161016001526020810190508061014052610140505060206101e06101405161016060006040515af1610b71573d600060003e3d6000fd5b3d602081183d60201002186101c0526101c080518060c05260208201805160e05250505060c05115610bb05760e05160c05160200360031b1c15610bb2575b565b600080fda165767970657283000307000b005b600080fd"


# deploy RewardsGauge implmentation
def deploy_gauge_implementation() -> RewardsOnlyGauge:
    print(f"--- Deploying L2 gauge implementation contract to {connected_network} ---")
    gauge_logic = RewardsOnlyGauge.deploy({"from": DEPLOY_ACCT})
    write_contract(INSTANCE_ID, "gaugeImplementation", gauge_logic.address)


# deploy childchainreceiver
def deploy_example_receiver():
    print(f"--- Deploying Receiver contract to {connected_network} ---")
    ChildChainReceiver.deploy(
        DEPLOY_ACCT,
        DEPLOY_ACCT,
        DEPLOY_ACCT,
        {"from": DEPLOY_ACCT},
        publish_source=VERIFY_CONTRACTS,
    )


# childchainstreamer is vyper: manually verify
def deploy_example_streamer():
    print(f"--- Deploying Receiver contract to {connected_network} ---")
    ChildChainStreamer.deploy(
        DEPLOY_ACCT, DEPLOY_ACCT, DEPLOY_ACCT, {"from": DEPLOY_ACCT}
    )


# rewards-only gauge is vyper: manually verify
def deploy_example_upgradeable_gauge():
    print(f"--- Deploying RewardsOnlyGauge contract to {connected_network} ---")
    fake_lpt = ERC20LP.deploy(
        "Tester LPT", "fake-lpt", 18, 100e18, DEPLOY_ACCT, {"from": DEPLOY_ACCT}
    )

    gauge_logic = Contract.from_abi(
        "RewardsOnlyGauge",
        deployed.read_addr("gaugeImplementation"),
        RewardsOnlyGauge.abi,
    )
    gauge_initializer_calldata = gauge_logic.initialize.encode_input(
        DEPLOY_ACCT,
        fake_lpt,
    )
    DfxUpgradeableProxy.deploy(
        gauge_logic.address,
        DEPLOY_PROXY_ACCT,
        gauge_initializer_calldata,
        {"from": DEPLOY_ACCT},
        publish_source=VERIFY_CONTRACTS,
    )


# deploy childchainreceiver
def deploy_factory() -> ChildChainFactory:
    print(VERIFY_CONTRACTS)

    print(f"--- Deploying ChildChainFactory contract to {connected_network} ---")
    factory = ChildChainFactory.deploy(
        existing.read_addr("multisig0"),
        CHILD_CHAIN_STREAMER_BYTECODE,
        {"from": DEPLOY_ACCT},
        publish_source=VERIFY_CONTRACTS,
    )
    write_contract(INSTANCE_ID, "gaugeFactory", factory.address)


def main():
    print(
        (
            "NOTE: This script expects configuration for:\n"
            "\t1. Gauge contracts owner\n"
            "\t2. ChildChainStreamer bytecode\n"
        )
    )

    verify_deploy_network(connected_network)
    verify_deploy_address(DEPLOY_ACCT)

    deploy_gauge_implementation()

    deploy_example_receiver()
    deploy_example_streamer()
    deploy_example_upgradeable_gauge()

    ## VERIFY ALL ABOVE CONTRACTS BEFORE DEPLOYING FACTORY
    # deploy_factory()
