// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.5. SEE SOURCE BELOW. !!
pragma solidity >=0.7.0 <0.9.0;

interface IDfxDistributor {
    event DelegateGaugeUpdated(
        address indexed _gaugeAddr,
        address indexed _delegateGauge
    );
    event DistributionsToggled(bool _distributionsOn);
    event GaugeControllerUpdated(address indexed _controller);
    event GaugeToggled(address indexed gaugeAddr, bool newStatus);
    event InterfaceKnownToggled(
        address indexed _delegateGauge,
        bool _isInterfaceKnown
    );
    event RateUpdated(uint256 _newRate);
    event Recovered(
        address indexed tokenAddress,
        address indexed to,
        uint256 amount
    );
    event RewardDistributed(address indexed gaugeAddr, uint256 rewardTally);
    event RoleAdminChanged(
        bytes32 indexed role,
        bytes32 indexed previousAdminRole,
        bytes32 indexed newAdminRole
    );
    event RoleGranted(
        bytes32 indexed role,
        address indexed account,
        address indexed sender
    );
    event RoleRevoked(
        bytes32 indexed role,
        address indexed account,
        address indexed sender
    );
    event UpdateMiningParameters(uint256 time, uint256 rate, uint256 supply);

    function BASE() external view returns (uint256);

    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);

    function GOVERNOR_ROLE() external view returns (bytes32);

    function GUARDIAN_ROLE() external view returns (bytes32);

    function RATE_REDUCTION_COEFFICIENT() external view returns (uint256);

    function RATE_REDUCTION_TIME() external view returns (uint256);

    function WEEK() external view returns (uint256);

    function controller() external view returns (address);

    function delegateGauge() external view returns (address);

    function delegateGauges(address) external view returns (address);

    function distributeReward(address gaugeAddr)
        external
        returns (uint256, uint256);

    function distributeRewardToMultipleGauges(address[] memory gauges) external;

    function distributionsOn() external view returns (bool);

    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    function grantRole(bytes32 role, address account) external;

    function hasRole(bytes32 role, address account)
        external
        view
        returns (bool);

    function initialize(
        address _rewardToken,
        address _controller,
        uint256 _initialRate,
        uint256 _startEpochSupply,
        address governor,
        address guardian,
        address _delegateGauge
    ) external;

    function isInterfaceKnown(address) external view returns (bool);

    function killedGauges(address) external view returns (bool);

    function lastTimeGaugePaid(address) external view returns (uint256);

    function miningEpoch() external view returns (uint256);

    function rate() external view returns (uint256);

    function recoverERC20(
        address tokenAddress,
        address to,
        uint256 amount
    ) external;

    function renounceRole(bytes32 role, address account) external;

    function revokeRole(bytes32 role, address account) external;

    function rewardToken() external view returns (address);

    function setDelegateGauge(
        address gaugeAddr,
        address _delegateGauge,
        bool toggleInterface
    ) external;

    function setGaugeController(address _controller) external;

    function setRate(uint256 _newRate) external;

    function startEpochSupply() external view returns (uint256);

    function startEpochTime() external view returns (uint256);

    function supportsInterface(bytes4 interfaceId) external view returns (bool);

    function toggleDistributions() external;

    function toggleGauge(address gaugeAddr) external;

    function toggleInterfaceKnown(address _delegateGauge) external;

    function updateMiningParameters() external;
}
